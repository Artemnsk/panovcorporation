package solvers;

import Population.Population;
import static algorithms.OptimizationStatus.RUNNING;
import net.sourceforge.interval.ia_math.RealInterval;
import algorithms.BaseAlgorithm;
import algorithms.OptimizationStatus;
import algorithms.StopCriterion;
import core.Box;
import functions.FunctionNEW;

/*
 * Genetic algorithm to tune coefficients of a genetic algorithm
 */
public class IntervalGeneticSolverMain extends BaseAlgorithm implements IntervalSolver {
	public IntervalGeneticSolver IGS;	// the genetic algorithm which coefficients we are tuning here
	private final int searchIterate;	// solving consists of two parts: searching for better coefficients and optimizing using 
	private final int goodIterate;		//   the best found coefficients. These two consts are iterations numbers for each phases  
	private Population[] population;		// population (collection of sets of coefficients)
	private OptimizationStatus status;	
	
	public IntervalGeneticSolverMain(double alpha, double betta, double gamma) {
		this(alpha, betta, gamma, 5, 7);
	}
	
	public IntervalGeneticSolverMain(double alpha, double betta, double gamma, 
			int searchIterate, int goodIterate) {
		assert (alpha >= 0 && alpha <= 1);
		assert (betta >= 0 && betta <= 1);
		assert (gamma >= 0 && gamma <= 1);
		
		population = new Population[3];
		population[0] = new Population(10);
		population[1] = new Population(10);
		population[2] = new Population(10);

		this.searchIterate = searchIterate;
		this.goodIterate = goodIterate;
		this.IGS = new IntervalGeneticSolver(alpha, betta, gamma);
	}
	
	public double calcFitFunction(Box b) {
		return IGS.calcFitFunction(b);		
	}
	
	//ALGORITHM

	public void solve(){
		//int k = 0;
		// Workaround: to count first function value
		// TODO: FIXME!
		iterate(1);
		System.out.println("\n\n START\n");
		int k = 0;
		do {

			my_iteration(1, searchIterate, goodIterate);
			
		} while (status == RUNNING);
	}
	
	private void my_iteration(int level, int searchIterate, int goodIterate){

		int true_level = level;
		
		if(true_level == 0){
			
			double[] bestCoefficients = population[true_level].getBest();
			population[true_level].setCurrent(population[true_level].getBestObject());
			
			IGS.changeCoefficients(bestCoefficients);
			//double[] bestCoefficients = {1, 0, 0};
			
			double prevEstimate = IGS.getOptimumValue().wid();
			double prevBoxes = IGS.getOptimumArea().length;
			
			double fitness = 0;
			for(int i = 0; i < goodIterate; i++){
				this.status = iterate(goodIterate);
			}
			
			double curEstimate = IGS.getOptimumValue().wid();
			double curBoxes = IGS.getOptimumArea().length;
			double successfulness1 = 1 - curEstimate/prevEstimate;
			double successfulness2 = curEstimate - prevEstimate;
			double successfulness3 = prevBoxes > curBoxes ? prevBoxes - curBoxes : 0;
			double sum = successfulness1 + successfulness2 + successfulness3;
			successfulness1 /= sum;
			successfulness2 /= sum;
			successfulness3 /= sum;
			double x = (population[1]).getCurrentCoeff(0);
			double y = (population[1]).getCurrentCoeff(1);
			double z = (population[1]).getCurrentCoeff(2);		
			fitness = successfulness1*x + successfulness2*y + successfulness3*z;
			population[true_level].updateFitness(bestCoefficients, fitness);

			double[] crosCoefficients = (population[0]).crossBestWithRnd();
			population[true_level].setCurrent(crosCoefficients);
			
			for(int i = 0; i < searchIterate; i++){
				System.out.println("\t\t 0 LEVEL SEARCH ITERATION " + i + 
						".\t Best: " + (population[0]).getBest()[0] + " " + population[0].getBest()[1] + " " + (population[0]).getBest()[2]);
				fitness = iterateWithThisCoefficients(crosCoefficients, searchIterate);
				if ((population[true_level]).isBetterThanWorst(fitness)) {
					(population[true_level]).replaceWorstWithThis(crosCoefficients, fitness);
					System.out.println("Worst replaced with CROSS");
				}
			}
			
		}else if(true_level == 1){

			double spaceBefore = 1;
			double[] bestCoefficients = population[true_level].getBest();
			population[true_level].setCurrent(population[true_level].getBestObject());
			//double[] bestCoefficients = {1, 0, 0};
			double fitness = 0;
			
			for(int i = 0; i < goodIterate; i++){
				my_iteration(true_level-1, searchIterate, goodIterate);
			}
			
			double spaceAfter = 0.5;
			fitness = 1 - spaceAfter/spaceBefore;
			population[true_level].updateFitness(bestCoefficients, fitness);
			spaceBefore = 1;
			
			double[] crosCoefficients = (population[1]).crossBestWithRnd();
			population[true_level].setCurrent(crosCoefficients);

			for(int i = 0; i < searchIterate; i++){
				my_iteration(true_level-1, searchIterate, goodIterate);
			}
			
			spaceAfter = 0.5;
			fitness = 1 - spaceAfter/spaceBefore;
			if ((population[true_level]).isBetterThanWorst(fitness)) {
				(population[true_level]).replaceWorstWithThis(crosCoefficients, fitness);
				System.out.println("Worst replaced with CROSS");
			}
		}		
	}

	private double iterateWithThisCoefficients(double[] coefficientsToUse, int iterationNumber) {
		// save previous width to compare it with the results of these iterations  
		double prevEstimate = IGS.getOptimumValue().wid();
		double prevBoxes = IGS.getOptimumArea().length;

		// set new coefficients and do @iterationNumber iterations
		IGS.changeCoefficients(coefficientsToUse);
		this.status = iterate(iterationNumber);
		
		// calculate how successful were these iterations
		double curEstimate = IGS.getOptimumValue().wid();
		double curBoxes = IGS.getOptimumArea().length;
		
		double successfulness1 = 1 - curEstimate/prevEstimate;
		double successfulness2 = curEstimate - prevEstimate;
		double successfulness3 = prevBoxes > curBoxes ? prevBoxes - curBoxes : 0;
		
		double sum = successfulness1 + successfulness2 + successfulness3;
		
		successfulness1 /= sum;
		successfulness2 /= sum;
		successfulness3 /= sum;
		
		double x = (population[1]).getCurrentCoeff(0);
		double y = (population[1]).getCurrentCoeff(1);
		double z = (population[1]).getCurrentCoeff(2);
				
		double successfulness = successfulness1*x + successfulness2*y + successfulness3*z;
		//successfulness /= iterationNumber; // normalize on the duration
		
		return successfulness;
	}
	
	protected OptimizationStatus iterate(int i_quantity) {
		IGS.stopCriterion.setMaxIterations(i_quantity);
		IGS.stopCriterion.reset();
		IGS.solve();	
		return IGS.myStatus;
	}
	
	public RealInterval getOptimumValue(){
		return IGS.getOptimumValue();
	}
	
	public Box[] getOptimumArea(){
		return IGS.getOptimumArea();
	}
	
	public void setProblem(FunctionNEW f, Box area){
		IGS.setProblem(f, area);
	}
	
	public void setStopCriterion(StopCriterion stopCriterion){
		IGS.setStopCriterion(stopCriterion);
	}
	
	public void setPrecision( double pres ){
		IGS.setPrecision(pres);
	}
	
	public double getPrecision(){
		return IGS.getPrecision();
	}
	
	public double getLowBoundMaxValue(){
		return IGS.getLowBoundMaxValue();
	}
	
	//BASE ALGORITHM
	
}
